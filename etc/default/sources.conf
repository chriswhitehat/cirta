######################################################################################################
# Notes:  All values in the key = value pairs are escape sequence decoded.  
#         For example:
#                     myvar = my\nexample\nstring\n
#         Would result in a string containing three line breaks.
######################################################################################################

############################################
# CIRTA data sources
############################################
#
# - This section defines the data sources that are to be run when using the standard CIRTA execution.
# - The sources will execute in the order they're present in this configuration file.
# - Required variables needed for all sources are in all caps.
# - You can also define new variables that are specific to and read by the data source.
# - The name of the data
#
# WARNING:  The input provided will be directly injected into the execution of CIRTA.  There has been
#           no attempt to sanitize the input and by the nature of a plugin system is giving trust to
#           the end user on the modules included.  It is strongly recommended that this file be owned
#           and only r/w by root.
#
#
#    [<string>]
#    * Defines new data source stanza.
#    * String is the name of the Python module file less the extension (.py)
#    
#    
#    FORMAL_NAME = <string>
#    * Formal name of data source used for terminal output
#    
#    HELP_SHORT_FLAG = <string>
#    * Define the short flag for CIRTA's help documentation
#    
#    HELP_DESCRIPTION = <string>
#    * Define the help documentation that will be displayed in CIRTA's help
#    
#    AD_HOC = [True|False]
#    * Specifies if the data source can be run in ad hoc mode.
#    * If False it will only run during the default or other defined execution paths.
#    
#    
#    DEFAULT = [True|False]
#    * Adds this data source to the default execution path.
#    * If set to False it can only be used in ad hoc mode.
#    * If False and AD_HOC is also False this data source will not run
#    
#    
#    POST_ACTION = [True|False]
#    * Determines if the data source should be run before or after the selected "Action(s)" are run
#    * If data source defines a PROVIDES list then only other POST_ACTIONs will be able to use the derived data.
#    
#    
#    REQUIRED..<string> = <string>
#    * Define what this data source requires to run and provide a default 
#    * If previous input and data sources were unable to provide the required data.
#    * This can be information explicitly requested from the user in input, attributes that are populated 
#    *    by other data sources that precede this one, or more statically defined variables to be used
#    *    in the data source (see PROVIDES).
#    * There is no limit to how many REQUIRED variables can be defined.
#    * Note: the string after the double colons must not have a space.
#    * Note: if no default makes sense "None" can be provided.
#    *
#    * Eg:   REQUIRED..ip_address = None
#    
#    
#    PROVIDES..<string> = <default>
#    * This source will attempt to provide/gather/infer/extract the following variables.
#    * There is no limit to how many PROVIDES variables can be defined.
#    * Eg. Populating MAC_Address from DHCP logs
#    * Note: the string after the double colons must not have a space.
#    * Note: if no default makes sense "None" can be provided.
#    *
#    * Eg:   PROVIDES..mac_address = 01:23:45:67:89:ab

#######################
[splunked]

FORMAL_NAME = Splunked
ENABLED = True
DEFAULT = True
AD_HOC = False
HELP_SHORT_FLAG = None
HELP_DESCRIPTION = None
POST_ACTION = False

REQUIRES = 

PROVIDES = 

#######################
[dnslookup]

FORMAL_NAME = nslookup
ENABLED = True
DEFAULT = True
AD_HOC = False
HELP_SHORT_FLAG = None
HELP_DESCRIPTION = None
POST_ACTION = False

REQUIRES = ip_address

PROVIDES = a_record, hostname


#######################
[dhcp]

FORMAL_NAME = DHCP
ENABLED = True
DEFAULT = True
AD_HOC = True
HELP_SHORT_FLAG = d
HELP_DESCRIPTION = dhcp logs generated from InfoBlox
POST_ACTION = False

REQUIRES = ip_address

PROVIDES = mac_address, hostname

outputExtension = dhcp
server = None
logpath = None
compressionDelay = 28
compressionExtension = bz2

splunkSourcetype = dhcp


#######################
[nbtscan]

FORMAL_NAME = NetBIOS Scan
ENABLED = True
DEFAULT = True
AD_HOC = False
HELP_SHORT_FLAG = None
HELP_DESCRIPTION = None
POST_ACTION = False

REQUIRES = ip_address

PROVIDES = netbios_name, netbios_user, netbios_server, netbios_mac, mac_address, hostname


#######################
[sguilevents]

FORMAL_NAME = Sguil Events
ENABLED = True
DEFAULT = True
AD_HOC = True
HELP_SHORT_FLAG = e
HELP_DESCRIPTION = Queries the Sguil DB for events by IP address
POST_ACTION = False

REQUIRES = ip_address

PROVIDES =

outputExtension = se

splunkSourcetype = None

so_server = None

######################
[sguilflow]

FORMAL_NAME = Sguil SANCP/Flow
ENABLED = True
DEFAULT = True
AD_HOC = True
HELP_SHORT_FLAG = o
HELP_DESCRIPTION = queries the Sguil DB for SANCP/Flow by IP address
POST_ACTION = False

REQUIRES = ip_address

PROVIDES = 

outputExtension = sf

so_server = None


#######################
[fireevents]

FORMAL_NAME = FireEye Events
ENABLED = True
DEFAULT = True
AD_HOC = True
HELP_SHORT_FLAG = f
HELP_DESCRIPTION = queries Splunk for FireEye events in raw and formatted
POST_ACTION = False

REQUIRES = ip_address

PROVIDES = mac_address

SPLUNK_SEARCH_HEAD = None
SPLUNK_SEARCH_HEAD_PORT = 8089
SPLUNK_SEARCH_HEAD_SCHEME = https
SPLUNK_SEARCH_HEAD_USERNAME = None
SPLUNK_SEARCH_HEAD_PASSWORD = None


#######################
[fortigate]

FORMAL_NAME = Fortigate UTM Logs
ENABLED = True
DEFAULT = True
AD_HOC = True
HELP_SHORT_FLAG = g
HELP_DESCRIPTION = Fortigate UTM logs
POST_ACTION = False

REQUIRES = ip_address

PROVIDES = username

outputExtension = fg
server = None
logpath = None
compressionDelay = 28
compressionExtension = xz

splunkSourcetype = None



#######################
[epodetails]

FORMAL_NAME = ePO System Details
ENABLED = True
DEFAULT = True
AD_HOC = True
HELP_SHORT_FLAG = ed
HELP_DESCRIPTION = Pull system details from ePO.
POST_ACTION = False

REQUIRES = ip_address

PROVIDES = hostname, domain_name, username, mac_address, operating_system, system_location, fqdn 

epoServers = 
epoUser = 
epoPassword = 


#######################
[systemad]

FORMAL_NAME = AD System Details
ENABLED = True
DEFAULT = True
AD_HOC = False
HELP_SHORT_FLAG = None
HELP_DESCRIPTION = None
POST_ACTION = False

REQUIRES = hostname

PROVIDES = ad_ou, ad_description, operating_system

ldapServer = None
baseDistinguishedName = None
userDN = None
password = None


#######################
[userdetails]

FORMAL_NAME = User Details
ENABLED = True
DEFAULT = True
AD_HOC = True
HELP_SHORT_FLAG = u
HELP_DESCRIPTION = ldap lookup for user details
POST_ACTION = False

REQUIRES = username

PROVIDES = full_name, email, phone_number, job_title, employee_type, department, costco_district, postal_address, manager, manager_email

ldapServer = None
baseDistinguishedName = None
userDN = None
password = None


#######################
[vturl]

FORMAL_NAME = Virus Total URL
ENABLED = True
DEFAULT = True
AD_HOC = True
HELP_SHORT_FLAG = vu
HELP_DESCRIPTION = Check URLs against Virus Total
POST_ACTION = False

REQUIRES =

PROVIDES =

outputExtension = vtu
apiKey = None
oldestHours = 24

splunkSourcetype = None


#######################
[pcaps]

# Dependency on tshark being installed on each sensor

FORMAL_NAME = Packet Captures
ENABLED = True
DEFAULT = True
AD_HOC = True
HELP_SHORT_FLAG = k
HELP_DESCRIPTION = Pull full packet captures from specified sguil sensors for defined time range and bpf
POST_ACTION = True

REQUIRES = ip_address

PROVIDES = pcaps

# Security Onion (sguil) server to enumerate sensors from the DB.
so_server = None
# Securion Onion (sguil) sensors to pull pcaps from, comma separated.
so_sensors = None
# Number of minutes to pull pcaps before and after event time
defaultBefore = 30
defaultAfter = 30
# Specify which sensors should be merged into one pcap, comma separated
mergeGroups = None
# Default sensors to pull from during a regular execution
defaultSensors = All

#######################
[brospect]

FORMAL_NAME = Bro Inspect/Extract
ENABLED = True
DEFAULT = True
AD_HOC = True
HELP_SHORT_FLAG = r
HELP_DESCRIPTION = Process archived pcaps using Bro, extracting filetypes of interest and generating logs based on pcaps.
POST_ACTION = True

REQUIRES = pcaps

PROVIDES = extracted_files

# Location of Bro application as it is required for this datasource
broPath = /opt/bro/bin/bro

#######################
[dailycustom]

FORMAL_NAME = Custom Daily
ENABLED = True
DEFAULT = False
AD_HOC = True
HELP_SHORT_FLAG = c
HELP_DESCRIPTION = Run custom piped command to a daily log source. Note: this can only be run for one custom log source per CIRTA execution.
POST_ACTION = False

REQUIRES = 

PROVIDES = 


#######################
[quarantine]

FORMAL_NAME = Quarantine
ENABLED = True
DEFAULT = False
AD_HOC = True
HELP_SHORT_FLAG = q
HELP_DESCRIPTION = Quarantine a device by CIRTA ID or manual configuration.
POST_ACTION = False

REQUIRES = 

PROVIDES = 

SPLUNK_SEARCH_HEAD = None
SPLUNK_SEARCH_HEAD_PORT = 8089
SPLUNK_SEARCH_HEAD_SCHEME = https
SPLUNK_SEARCH_HEAD_USERNAME = None
SPLUNK_SEARCH_HEAD_PASSWORD = None

quarantineAttrs = 